// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String          @id
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  searches      PropertySearch[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  
  // Add extra fields for Clerk integration
  clerkId       String?         @unique
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Property {
  id                String           @id @default(cuid())
  address           String
  city              String
  state             String
  zipCode           String
  price             Float
  bedrooms          Int
  bathrooms         Float
  squareFeet        Int?
  yearBuilt         Int?
  description       String?          @db.Text
  propertyType      String
  url               String           @unique
  imageUrl          String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  source            String           // Website source (e.g., "zillow", "redfin")
  isNotified        Boolean          @default(false)
  notificationStatus String?         // "success", "failed", null (not attempted)
  searches          PropertySearch[]
  notificationLogs  NotificationLog[]
}

model PropertySearch {
  id             String     @id @default(cuid())
  name           String
  minPrice       Float?
  maxPrice       Float
  minBedrooms    Int
  minBathrooms   Float
  location       String[]   // List of cities, zip codes, or neighborhoods
  isActive       Boolean    @default(true)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  lastCheckedAt  DateTime?
  properties     Property[]
  notifyOnNew    Boolean    @default(true)
  user           User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
}

model ScrapeLog {
  id           String   @id @default(cuid())
  source       String
  startTime    DateTime @default(now())
  endTime      DateTime?
  itemsFound   Int      @default(0)
  newItems     Int      @default(0)
  status       String   // "success", "failed", "running"
  errorMessage String?
}

model NotificationLog {
  id            String    @id @default(cuid())
  userId        String
  propertyId    String
  status        String    // "success", "failed"
  errorMessage  String?
  createdAt     DateTime  @default(now())
  property      Property  @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}